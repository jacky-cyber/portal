package com.jspgou.cms.action.admin;


import com.jspgou.cms.AdminMap;
import com.jspgou.cms.entity.ShopAdmin;
import com.jspgou.cms.service.LoginSvc;
import com.jspgou.cms.web.SiteUtils;
import com.jspgou.cms.web.threadvariable.AdminThread;
import com.jspgou.common.security.BadCredentialsException;
import com.jspgou.common.security.UsernameNotFoundException;
import com.jspgou.common.web.session.SessionProvider;
import com.jspgou.core.entity.Website;
import com.jspgou.core.security.UserNotInWebsiteException;
import com.jspgou.core.web.WebErrors;
import com.octo.captcha.service.CaptchaService;
import com.octo.captcha.service.CaptchaServiceException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
* This class should preserve.
* @preserve
*/
@Controller
public class LoginAct {
	private static final Logger log = LoggerFactory.getLogger(LoginAct.class);

	@RequestMapping(value = "/index.do", method = RequestMethod.GET)
	public String index(ModelMap model) {
		ShopAdmin admin = AdminThread.get();
		if (admin != null) {
			model.addAttribute("admin", admin);
			return "index";
		} else {
			return "login";
		}
	}
	
	

	@RequestMapping(value = "/index.do", method = RequestMethod.POST)
	public String loginSubmit(String username, String password,String checkcode,
			HttpServletRequest request, HttpServletResponse response,
			ModelMap model) { 
		WebErrors errors = validateSubmit(username,request,response);
		if (!errors.hasErrors()) {
			Website web = SiteUtils.getWeb(request);
            String id = session.getSessionId(request, response);
            if(log.isDebugEnabled())
                log.debug("checkcode '{}' .", checkcode.toUpperCase());
            try {
//                if (!CaptchaServiceSingleton.getService().validateResponseForID(id, checkcode)) {
//                    return "login";
//                }
                if (!captchaService.validateResponseForID(id, checkcode.toUpperCase())) {
                    return "login";
                }
            } catch (CaptchaServiceException e) {
                errors.addError(e.getMessage());
                log.info(e.getMessage());

            }
			try {
				loginSvc.adminLogin(request, response, web, username, password);
				log.info("admin '{}' login success.", username);
				return "redirect:index.do";
			} catch (UsernameNotFoundException e) {
				errors.addError(e.getMessage());
				log.info(e.getMessage());
			} catch (BadCredentialsException e) {
				if(!username.trim().equals("admin")){
					AdminMap.addAdminMapVal(username);
				}
				errors.addError(e.getMessage());
				log.info(e.getMessage());
			} catch (UserNotInWebsiteException e) {
				errors.addError(e.getMessage());
				log.info(e.getMessage());
			}
		}
		errors.toModel(model);
		return "login";
	}
	@RequestMapping("/logout.do")
	public String logout(HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		loginSvc.logout(request, response);
		return "redirect:index.do";
	}
	
	private WebErrors validateSubmit(String username,HttpServletRequest request,HttpServletResponse response) {
		WebErrors errors = WebErrors.create(request);
		Integer errCount=AdminMap.getAdminMapVal(username);
		if(errCount!=null&&errCount>=3){
			errors.addError("你的账号被锁定!");
			return errors;
		}
		return errors;
	}

	@Autowired
	private LoginSvc loginSvc;

    @Autowired
    private SessionProvider session;
    @Autowired
    private CaptchaService captchaService;
	
}

package com.jspgou.cms.dao.impl;

import com.jspgou.core.entity.Admin;
import com.jspgou.core.entity.User;
import net.sf.ehcache.search.expression.Criteria;
import org.apache.commons.lang.StringUtils;
import org.apache.tools.ant.types.resources.Restrict;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

import com.jspgou.common.hibernate3.Finder;
import com.jspgou.common.hibernate3.HibernateBaseDao;
import com.jspgou.common.page.Pagination;
import com.jspgou.cms.dao.ShopAdminDao;
import com.jspgou.cms.entity.ShopAdmin;

/**
* This class should preserve.
* @preserve
*/
@Repository
public class ShopAdminDaoImpl extends HibernateBaseDao<ShopAdmin, Long>
		implements ShopAdminDao {
	public Pagination getPage(Long webId, int pageNo, int pageSize) {
		Finder f = Finder
				.create("select bean.admin from ShopAdmin bean where bean.website.id=:webId order by bean.id desc");
		f.setParam("webId", webId);
		return find(f, pageNo, pageSize);
	}

    public Pagination getPageForChannel(String channelId,String commerceId,Long webId, int pageNo, int pageSize) {
        StringBuffer sb = new StringBuffer("from ShopAdmin bean where bean.website.id='"+webId+"' ");

        if(!StringUtils.isBlank(channelId)){
            sb.append(" and bean.admin.user.channelId ='"+channelId+"' ");
        }
        if(!StringUtils.isBlank(commerceId)){
            sb.append(" and bean.admin.user.commerceId ='"+commerceId+"' ");
        }
        sb.append(" order by bean.id desc");
        Finder f = Finder
                .create(sb.toString());
        return find(f, pageNo, pageSize);
    }


    public Pagination getPageForChannelOnly(String channelId,String commerceId,Long webId, int pageNo, int pageSize) {
        StringBuffer sb = new StringBuffer("from ShopAdmin bean where bean.website.id='"+webId+"' ");

        if(!StringUtils.isBlank(channelId)){
            sb.append(" and bean.admin.user.channelId ='"+channelId+"' ");
        }

        sb.append(" and bean.admin.user.commerceId IS NULL ");

        sb.append(" order by bean.id desc");
        Finder f = Finder
                .create(sb.toString());
        return find(f, pageNo, pageSize);
    }

	public ShopAdmin findById(Long id) {
		ShopAdmin entity = get(id);
		return entity;
	}

	public ShopAdmin save(ShopAdmin bean) {
		getSession().save(bean);
		return bean;
	}

	public ShopAdmin deleteById(Long id) {
		ShopAdmin entity = super.get(id);
		if (entity != null) {
			getSession().delete(entity);
		}
		return entity;
	}

	@Override
	public Admin findAdminId(Long id) {
		org.hibernate.Criteria criteria = super.getSession().createCriteria(Admin.class);
		criteria.add(Restrictions.eq("id", id));
		return (Admin) criteria.uniqueResult();
	}

	@Override
	protected Class<ShopAdmin> getEntityClass() {
		return ShopAdmin.class;
	}
}
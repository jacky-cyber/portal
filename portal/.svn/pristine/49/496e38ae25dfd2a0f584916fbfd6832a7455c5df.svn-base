package com.jspgou.cms.dao.impl;

import com.ifunpay.util.common.ClassUtil;
import com.jspgou.cms.dao.ReportDao;
import com.jspgou.cms.entity.ChannelReport;
import com.jspgou.common.jdbc.JdbcBaseDao;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Repository;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by jiang on 2015/9/7.
 */
@Repository
public class ReportDaoImpl extends JdbcBaseDao implements ReportDao {

    @Override
    public Map<String, Object> fetchChannelReport(Map<String, Object> filterMap, String sortField, boolean isASC, int start, int size) {
        String sql = channelReportSql(filterMap, sortField, isASC);
        List<ChannelReport> channelReports = new ArrayList<>();
        Map<String, Object> map = new HashMap<>();
        logger.info("sql-->" + sql);
        if (null == sql) {
            map.put("rowCount", 0);
            map.put("reports", channelReports);
            return map;
        }

        if (start < 0) start = 0;
        if (size < 0) size = 50;

        List<Map<String, Object>> list = super.getResult(sql, start, size);
        int rowCount = getCount(sql);
        for (int i=0; i<list.size(); i++){
            ChannelReport channelReport = new ChannelReport();
            channelReport.setChannelId(Integer.parseInt(list.get(i).get("channelId").toString()));
            channelReport.setChannelName(list.get(i).get("channelName").toString());
            channelReport.setTotalOrder(Integer.parseInt(list.get(i).get("totalOrder").toString()));
            channelReport.setTotalAmount((new BigDecimal(list.get(i).get("totalAmount").toString())).setScale(2, BigDecimal.ROUND_UP));
            channelReport.setReturnAmount((new BigDecimal(list.get(i).get("returnAmount").toString())).setScale(2, BigDecimal.ROUND_UP));
            channelReport.setPaiedAmount((new BigDecimal(list.get(i).get("paiedAmount").toString())).setScale(2, BigDecimal.ROUND_UP));
            channelReports.add(channelReport);
        }

        map.put("rowCount", rowCount);
        map.put("reports", channelReports);
        return map;
    }

    private String channelReportSql(Map<String, Object> filterMap, String sortField, boolean isASC) {
        StringBuffer sqlStr = new StringBuffer("SELECT a.channel_id channelId, a.channel_name channelName, \n" +
                "(SUM(CASE a.pay_status WHEN 'PaySucceeded' THEN 1 ELSE 0 END) + \n" +
                "SUM(CASE a.pay_status WHEN 'RefundSucceeded' THEN 1 ELSE 0 END)) totalOrder, \n" +
                "(SUM(CASE a.pay_status WHEN 'PaySucceeded' THEN a.total_amount ELSE 0 END) + \n" +
                "SUM(CASE a.pay_status WHEN 'RefundSucceeded' THEN a.total_amount ELSE 0 END))/100 totalAmount, \n" +
                "(SUM(CASE a.pay_status WHEN 'RefundSucceeded' THEN a.total_amount ELSE 0 END))/100 returnAmount, \n" +
                "(SUM(CASE a.pay_status WHEN 'PaySucceeded' THEN a.total_amount ELSE 0 END))/100 paiedAmount \n" +
                "FROM n_order a, n_order_product b where a.id=b.order_id ");

        try {
            if (filterMap != null) {
                filterMap.forEach((k, v) -> {
                    if (k != null && !k.isEmpty() && null != v && "" != v ) {
                        if (k.equals("startTime")) {
                            sqlStr.append(" and a.create_time>='" + String.valueOf(v) + "'");
                        } else if (k.equals("endTime")){
                            sqlStr.append(" and a.create_time<='" + String.valueOf(v) + "'");
                        }
                    }
                });
            }
            sqlStr.append(" GROUP BY a.channel_id HAVING 1=1 ");
            if (filterMap != null) {
                filterMap.forEach((k, v) -> {
                    if (k != null && !k.isEmpty() && !k.equals("startTime") && !k.equals("endTime") && null != v && "" != v) {
                        ClassUtil.getFieldType(ChannelReport.class, k)
                                .ifPresent(type -> {
                                    if (ClassUtil.isNumberType(type) || ClassUtil.isEnumType(type)) {
                                        ClassUtil.newInstance(type, v).ifPresent(fieldValue -> {
                                            logger.info("add condition eq: " + k + " -> " + v);
                                            sqlStr.append(" and " + k + " = " + fieldValue + " ");
                                        });
                                    } else if (type == String.class) {
                                        if (null != v && "" != v) {
                                            logger.info("add condition LIKE: " + k + " -> " + v + "---->" + v.getClass());
                                            sqlStr.append(" and " + k + " like '%" + v + "%' ");
                                        }
                                    }
                                });
                    }
                });
            }
            /*if (filterMap != null) {
                filterMap.forEach((k, v) -> {
                    if (k != null && !k.isEmpty() && null != v && "" != v) {
                        if (k.equals("channelId")) {
                            sqlStr.append(" and a.channel_id='" + String.valueOf(v) + "'");
                        } else if (k.equals("channelName")) {
                            sqlStr.append(" and a.channel_name like '%" + String.valueOf(v) + "%'");
                        }
                    }
                });
            }*/

            sqlStr.append("order by 1=1");
            if (sortField != null && !sortField.isEmpty()) {
                logger.info("add sort field: " + sortField + ", ORDER: " + (isASC ? "ASC" : "DESC"));
                sqlStr.append("," + sortField + " " + (isASC ? "ASC" : "DESC"));
            }
            return sqlStr.toString();
        } catch (Exception e) {
            logger.error("×é×°sql´íÎó", e);
        }
        return null;
    }

    private static final Logger logger = Logger.getLogger(ReportDaoImpl.class);
}

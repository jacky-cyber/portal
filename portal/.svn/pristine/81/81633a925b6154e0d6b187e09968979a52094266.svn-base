package com.jspgou.cms.action.admin.main;

import static com.jspgou.common.page.SimplePage.cpn;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.ifunpay.portal.entity.OrderPayRefundEntity;
import com.ifunpay.portal.entity.OrderVoucher;
import com.ifunpay.portal.model.OrderPayRefundObj;
import com.jspgou.cms.entity.Order;
import com.jspgou.cms.entity.OrderExport;
import com.jspgou.core.utils.ExcelUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import com.jspgou.common.page.Pagination;
import com.jspgou.common.web.CookieUtils;
import com.jspgou.core.entity.Website;
import com.jspgou.core.web.SiteUtils;
import com.jspgou.core.web.WebErrors;
import com.jspgou.cms.entity.Gathering;
import com.jspgou.cms.manager.GatheringMng;

import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

/**
* This class should preserve.
* @preserve
*/
@Controller
public class GatheringAct {
	private static final Logger log = LoggerFactory.getLogger(GatheringAct.class);

	@RequestMapping("/Gathering/v_list.do")
	public String listAll(String accountNumber,String code,Integer pageNo, HttpServletRequest request, ModelMap model) {
		Pagination pagination = manager.getPage(accountNumber, code, cpn(pageNo), CookieUtils
				.getPageSize(request));
		model.addAttribute("pagination",pagination);
        model.addAttribute("code",code);
        model.addAttribute("accountNumber",accountNumber);
		return "Gathering/list";
	}

	@RequestMapping("orderPayRefundReportToXls.do")
	public void exportPayRefundList(String accountNumber,String code,HttpServletResponse response) {
		List<OrderPayRefundEntity> payRefundEntities = manager.getAllPayRefundToExcel(accountNumber, code);

		List<OrderPayRefundObj> payRefundObjs = new ArrayList<>();

		for(OrderPayRefundEntity orderPayRefundEntity:payRefundEntities){
			OrderPayRefundObj obj = new OrderPayRefundObj();
			obj.setAccountName(orderPayRefundEntity.getAccountName());
			obj.setAccountNumber(orderPayRefundEntity.getAccountNumber());
			obj.setAmount(orderPayRefundEntity.getAmount());
			obj.setCode(orderPayRefundEntity.getCode());
			obj.setPayMethod(orderPayRefundEntity.getPayMethod().getDisplayName());
			obj.setPayStatus(orderPayRefundEntity.getPayStatus().getDisplayName());
			obj.setPayTime(orderPayRefundEntity.getPayTime());
			char isPay = orderPayRefundEntity.getIsPay();
			if(isPay == '1'){
				obj.setIsPay("付款");
			}else if(isPay == '0'){
				obj.setIsPay("退款");
			}
			obj.setPosNumber(orderPayRefundEntity.getPosNumber());
			obj.setOperator(orderPayRefundEntity.getOperator());
			obj.setSerialNumber(orderPayRefundEntity.getSerialNumber());
			obj.setRefundSerialNumber(orderPayRefundEntity.getRefundSerialNumber());
			payRefundObjs.add(obj);
		}

		try {
			OutputStream outputStream = response.getOutputStream();
			response.setHeader("Content-disposition", "attachment; filename="+new String("收款信息".getBytes("GB2312"),"8859_1")+".xls");

			response.setContentType("application/msexcel");

			ExcelUtils<OrderPayRefundObj> excelUtils = new ExcelUtils<OrderPayRefundObj>();
			List<String[]> list = new ArrayList<String[]>();
			String[] a1 = {"订单编号", "code"};
			list.add(a1);
			String[] a10 = {"金额(分)", "amount"};
			list.add(a10);
			String[] a2 = {"银行流水号", "serialNumber"};
			list.add(a2);
			String[] a6 = {"支付账号", "accountNumber"};
			list.add(a6);
			String[] a61 = {"支付时间", "payTime"};
			list.add(a61);
			String[] a3 = {"支付状态", "payStatus"};
			list.add(a3);
			String[] a4 = {"付款序列号", "refundSerialNumber"};
			list.add(a4);
			String[] a5 = {"付款人", "accountName"};
			list.add(a5);
			String[] a7 = {"POS机编号", "posNumber"};
			list.add(a7);
			String[] a8 = {"操作", "isPay"};
			list.add(a8);

			excelUtils.toExcelAjax(list, payRefundObjs, outputStream);
		} catch (Exception e) {
			log.error("导出报表失败！");
		}
	}

	public static String toUtf8String(String s){
		StringBuffer sb = new StringBuffer();
		for (int i=0;i<s.length();i++){
			char c = s.charAt(i);
			if (c >= 0 && c <= 255){sb.append(c);}
			else{
				byte[] b;
				try { b = Character.toString(c).getBytes("utf-8");}
				catch (Exception ex) {
					System.out.println(ex);
					b = new byte[0];
				}
				for (int j = 0; j < b.length; j++) {
					int k = b[j];
					if (k < 0) k += 256;
					sb.append("%" + Integer.toHexString(k).toUpperCase());
				}
			}
		}
		return sb.toString();
	}

    public String list(Integer pageNo, HttpServletRequest request, ModelMap model) {
        Pagination pagination = manager.getPage("","",cpn(pageNo), CookieUtils
                .getPageSize(request));
        model.addAttribute("pagination",pagination);
        return "Gathering/list";
    }

	@RequestMapping("/Gathering/v_add.do")
	public String add(ModelMap model) {
		return "Gathering/add";
	}

	@RequestMapping("/Gathering/v_edit.do")
	public String edit(Long id, HttpServletRequest request, ModelMap model) {
		WebErrors errors = validateEdit(id, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		model.addAttribute("gathering", manager.findById(id));
		model.addAttribute("order",manager.findById(id).getIndent());
		return "Gathering/edit";
	}

	@RequestMapping("/Gathering/o_save.do")
	public String save(Gathering bean, HttpServletRequest request, ModelMap model) {
		WebErrors errors = validateSave(bean, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		bean = manager.save(bean);
		log.info("save Gathering id={}", bean.getId());
		return "redirect:v_list.do";
	}

	@RequestMapping("/Gathering/o_update.do")
	public String update(Gathering bean, Integer pageNo, HttpServletRequest request,
			ModelMap model) {
		WebErrors errors = validateUpdate(bean.getId(), request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		bean = manager.update(bean);
		log.info("update Gathering id={}.", bean.getId());
		return list(pageNo, request, model);
	}

	@RequestMapping("/Gathering/o_delete.do")
	public String delete(Long[] ids, Integer pageNo, HttpServletRequest request,
			ModelMap model) {
		WebErrors errors = validateDelete(ids, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		Gathering[] beans = manager.deleteByIds(ids);
		for (Gathering bean : beans) {
			log.info("delete Gathering id={}", bean.getId());
		}
		return list(pageNo, request, model);
	}

	private WebErrors validateSave(Gathering bean, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		return errors;
	}
	
	private WebErrors validateEdit(Long id, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		Website web = SiteUtils.getWeb(request);
		if (vldExist(id, web.getId(), errors)) {
			return errors;
		}
		return errors;
	}

	private WebErrors validateUpdate(Long id, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		Website web = SiteUtils.getWeb(request);
		if (vldExist(id, web.getId(), errors)) {
			return errors;
		}
		return errors;
	}

	private WebErrors validateDelete(Long[] ids, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		Website web = SiteUtils.getWeb(request);
		errors.ifEmpty(ids, "ids");
		for (Long id : ids) {
			vldExist(id, web.getId(), errors);
		}
		return errors;
	}

	private boolean vldExist(Long id, Long webId, WebErrors errors) {
		if (errors.ifNull(id, "id")) {
			return true;
		}
		Gathering entity = manager.findById(id);
		if(errors.ifNotExist(entity, Gathering.class, id)) {
			return true;
		}
		return false;
	}
	
	@Autowired
	private GatheringMng manager;
}
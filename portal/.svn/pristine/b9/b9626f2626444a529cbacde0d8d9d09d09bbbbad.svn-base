package com.jspgou.cms.action.admin.main;

import com.ifunpay.portal.dao.ChannelDao;
import com.ifunpay.portal.dao.OrderPayRefundDao;
import com.ifunpay.portal.entity.Channel;
import com.ifunpay.portal.entity.OrderPayRefundEntity;
import com.ifunpay.portal.entity.OrderVoucher;
import com.ifunpay.portal.entity.order.OrderEntity;
import com.ifunpay.portal.entity.order.OrderPostInfo;
import com.ifunpay.portal.entity.order.OrderProduct;
import com.ifunpay.portal.enums.*;
import com.ifunpay.portal.model.BankAppEnum;
import com.ifunpay.portal.service.CmbcRefundService;
import com.ifunpay.portal.service.OrderVoucherService;
import com.ifunpay.portal.service.log.OperationLogService;
import com.ifunpay.portal.service.order.OrderEntityService;
import com.ifunpay.portal.service.order.OrderPayRefundService;
import com.ifunpay.portal.service.order.OrderPostInfoService;
import com.ifunpay.portal.service.order.OrderProductService;
import com.jspgou.cms.dao.SequenceDao;
import com.jspgou.cms.entity.*;
import com.jspgou.cms.manager.*;
import com.jspgou.cms.web.threadvariable.AdminThread;
import com.jspgou.cms.web.threadvariable.MemberThread;
import com.jspgou.common.page.Pagination;
import com.jspgou.common.web.CookieUtils;
import com.jspgou.common.web.RequestUtils;
import com.jspgou.common.web.ResponseUtils;
import com.jspgou.common.web.session.SessionProvider;
import com.jspgou.core.entity.Admin;
import com.jspgou.core.entity.User;
import com.jspgou.core.entity.Website;
import com.jspgou.core.manager.AdminMng;
import com.jspgou.core.manager.UserMng;
import com.jspgou.core.utils.ExcelUtils;
import com.jspgou.core.web.SiteUtils;
import com.jspgou.core.web.WebErrors;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang.StringUtils;
import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.*;

import static com.jspgou.common.page.SimplePage.cpn;
import static com.jspgou.core.web.Constants.SESSION_USER_ID_KEY;

/**
* This class should preserve.
* @preserve
*/
@Controller
public class OrderAct {

    @Resource
    private OrderVoucherService orderVoucherService;


	private static final Logger log = LoggerFactory.getLogger(OrderAct.class);

    public static final String ALL = "all";
	public static final String PENDING = "pending";
	public static final String PROSESSING = "processing";
	public static final String DELIVERED = "delivered";
	public static final String COMPLETE = "complete";
	public static final String[] TYPES = { ALL, PENDING, PROSESSING, DELIVERED,
			COMPLETE };

	@RequestMapping("/order/v_list.do")
	public String list(String phone,String payMethod,String code,String channelName,String commerceName,String productName,String orderStatus,String paymentStatus,String shippingStatus,Long paymentId, Long shoppingId,String startTime,String endTime,
			Integer pageNo, HttpServletRequest request,
			ModelMap model) {
        log.info("show all orders,orderStatus=" + orderStatus + ";code=" + code);
        String commerceId = (String)session.getAttribute(request,"commerceId");
        log.info("commerce id ="+commerceId);
		Long comId = null;
		if(StringUtils.isNotBlank(commerceId)){
			comId = Long.parseLong(commerceId);
		}
        String channelId = (String)session.getAttribute(request,"channelId");
        log.info("channelId id ="+channelId);
		Long chanId = null;
		if(StringUtils.isNotBlank(channelId)){
			chanId = Long.parseLong(channelId);
		}

		Website web = SiteUtils.getWeb(request);
		String userName = RequestUtils.getQueryParam(request, "userName");
		userName = StringUtils.trim(userName);
		/*Pagination pagination = manager.getPage(channelName,commerceName,phone,channelId,commerceId,web.getId(), null,productName,userName,
				paymentId,shoppingId, startTime,endTime,null,null,status,paymentStatus,shippingStatus,code,
				cpn(pageNo), CookieUtils.getPageSize(request));*/
		Pagination pagination = manager.getPageForNewOrder(chanId,comId,code,phone,channelName,commerceName,productName,startTime,endTime,payMethod,paymentStatus,shippingStatus,orderStatus,cpn(pageNo), CookieUtils.getPageSize(request));
		model.addAttribute("pagination", pagination);
		model.addAttribute("payStatusList", PaymentStatusEnum.values());
		model.addAttribute("shipStatusList", ShipmentStatusEnum.values());
		model.addAttribute("payMethodList",PayMethodEnum.values());
		model.addAttribute("orderStatusList", OrderStatusEnum.values());
		
		List<Shipping> shippingList = shippingMng.getList(web.getId(), true);
		List<Payment> paymentList = paymentMng.getList(web.getId(), true);
		model.addAttribute("paymentList", paymentList);
		model.addAttribute("shippingList", shippingList);
		model.addAttribute("paymentId", paymentId);
		model.addAttribute("shoppingId", shoppingId);
		model.addAttribute("userName", userName);
		model.addAttribute("startTime", startTime);
		model.addAttribute("endTime", endTime);
		model.addAttribute("orderStatus", orderStatus);
		model.addAttribute("paymentStatus", paymentStatus);
		model.addAttribute("shippingStatus", shippingStatus);
		model.addAttribute("payMethod",payMethod);
        model.addAttribute("code",code);
        model.addAttribute("phone",phone);
		model.addAttribute("channelName",channelName);
		model.addAttribute("commerceName",commerceName);
		model.addAttribute("productName",productName);
		return "order/list";
	}
	/**
	 * 新订单报表
	 * @param productName
	 * @param startTime
	 * @param endTime
	 * @param response
	 */
	@RequestMapping(value = "newOrderReportToXls.do")
	public void newOrderReportToXls(String phone,String orderId,String payMethod,String paymentStatus,String shippingStatus,String channelName,String commerceName,String productName, String startTime, String endTime,String orderStatus, HttpServletResponse response,HttpServletRequest request) {
		String commerceId = (String)session.getAttribute(request,"commerceId");
		String channelId = (String)session.getAttribute(request,"channelId");
		log.info("commerce id ="+commerceId+";channel id ="+channelId);

		List<OrderExport> orderExportList = orderEntityService.newOrderExport(orderId,phone,channelName,commerceName,productName,startTime,endTime,payMethod,paymentStatus,shippingStatus,orderStatus);

		log.info("orderExportList size = " + orderExportList.size());

		try {
			OutputStream outputStream = response.getOutputStream();
			response.setHeader("Content-disposition", "attachment; filename="+new String("订单报表".getBytes("GB2312"),"8859_1")+".xls");
			//定义输出类型为excel
			response.setContentType("application/msexcel");

			ExcelUtils<OrderExport> excelUtils = new ExcelUtils<OrderExport>();
			List<String[]> list = new ArrayList<String[]>();
			String[] a1 = {"订单号", "code"};
			list.add(a1);
			String[] a10 = {"手机号", "phone"};
			list.add(a10);
			String[] a2 = {"商品名称", "productName"};
			list.add(a2);
			String[] a6 = {"渠道名称", "channelName"};
			list.add(a6);
			String[] a61 = {"商户名称", "commerceName"};
			list.add(a61);
			String[] a3 = {"创建时间", "createTime"};
			list.add(a3);
			String[] a5 = {"总金额(分)", "amount"};
			list.add(a5);
			String[] a7 = {"支付方式", "payMethod"};
			list.add(a7);
			String[] a8 = {"支付状态", "payStatus"};
			list.add(a8);
			String[] a9 = {"发货状态", "shipStatus"};
			list.add(a9);
			String[] a91 = {"订单状态", "orderStatus"};
			list.add(a91);
			String[] a11 = {"终端机编号", "terminalId"};
			list.add(a11);
			String[] a4 = {"流水号", "serialNo"};
			list.add(a4);
			excelUtils.toExcelAjax(list, orderExportList, outputStream);
		} catch (Exception e) {
			log.error("导出报表失败！");
		}
	}

    /**
     * 订单报表
     * @param productName
     * @param startTime
     * @param endTime
     * @param response
     */
    @RequestMapping(value = "orderReportToXls.do")
    public void orderReportToXls(String phone,String code,Integer status,Integer paymentStatus,Integer shippingStatus,Long paymentId,String channelName,String commerceName,String productName, Date startTime, Date endTime, HttpServletResponse response,HttpServletRequest request) {
        String commerceId = (String)session.getAttribute(request,"commerceId");
        log.info("commerce id =" + commerceId);
        String channelId = (String)session.getAttribute(request,"channelId");

        List<Order> orderList = manager.getAllOrderToExcel(channelName, commerceName, productName, phone, channelId, commerceId, paymentId, startTime, endTime, status, paymentStatus, shippingStatus, code);

		List<OrderExport> orderExportList = new ArrayList<>();

		for(int i=0;i<orderList.size();i++){
			OrderExport orderExport = new OrderExport();
			Order order = orderList.get(i);
			orderExport.setCode(order.getCode());
			orderExport.setTerminalId(order.getTerminalId());
			orderExport.setPhone(order.getReceivePhone());
			orderExport.setProductName(order.getProductName());
			if(order.getProduct()!=null) {
				orderExport.setChannelName(order.getProduct().getChannelName());
				orderExport.setCommerceName(order.getProduct().getCommerceName());
				int orderStatusCode = order.getProduct().getProductStamp();
				//商品类型，1.本地商品，2.虚拟商品，3.商城商品，4.金融商品
				if(orderStatusCode ==1){
					orderExport.setOrderStatus("本地商品");
				}else if(orderStatusCode ==2){
					orderExport.setOrderStatus("虚拟商品");
				}else if(orderStatusCode ==3){
					orderExport.setOrderStatus("商城商品");
				}else if(orderStatusCode ==4){
					orderExport.setOrderStatus("金融商品");
				}

			}
			orderExport.setSerialNo(order.getSerialNo());
			orderExport.setAmount(order.getTotal());
			orderExport.setCreateTime(order.getCreateTime());
			if(order.getPayment()!=null) {
				orderExport.setPayMethod(order.getPayment().getName());
			}

			int payStatusCode = order.getPaymentStatus();
			int shipStatusCode = order.getShippingStatus();
			if(payStatusCode == 1){
				orderExport.setPayStatus("未支付");
			}else if(payStatusCode == 2){
				orderExport.setPayStatus("已支付");
			}else if(payStatusCode == 3){
				orderExport.setPayStatus("已退款");
			}else if(payStatusCode == 4){
				orderExport.setPayStatus("退款失败");
			}

			if(shipStatusCode == 1){
				orderExport.setShipStatus("未发货");
			}else if(shipStatusCode == 2){
				orderExport.setShipStatus("已发货");
			}else if(shipStatusCode == 3){
				orderExport.setShipStatus("已退货");
			}else if(shipStatusCode == 4){
				orderExport.setShipStatus("已签收");
			}else if(shipStatusCode == 5){
				orderExport.setShipStatus("出货失败");
			}
			orderExportList.add(orderExport);

		}

        log.info("orderList size = " + orderList.size());

        try {
            OutputStream outputStream = response.getOutputStream();
            response.setHeader("Content-disposition", "attachment; filename="+new String("订单报表".getBytes("GB2312"),"8859_1")+".xls");
            //定义输出类型为excel
            response.setContentType("application/msexcel");

            ExcelUtils<OrderExport> excelUtils = new ExcelUtils<OrderExport>();
            List<String[]> list = new ArrayList<String[]>();
            String[] a1 = {"订单号", "code"};
            list.add(a1);
			String[] a10 = {"手机号", "phone"};
			list.add(a10);
            String[] a2 = {"商品名称", "productName"};
            list.add(a2);
			String[] a6 = {"渠道名称", "channelName"};
			list.add(a6);
			String[] a61 = {"商户名称", "commerceName"};
			list.add(a61);
            String[] a3 = {"创建时间", "createTime"};
            list.add(a3);
            String[] a5 = {"总金额(分)", "amount"};
            list.add(a5);
			String[] a7 = {"支付方式", "payMethod"};
			list.add(a7);
			String[] a8 = {"支付状态", "payStatus"};
			list.add(a8);
			String[] a9 = {"发货状态", "shipStatus"};
			list.add(a9);
			String[] a11 = {"终端机编号", "terminalId"};
			list.add(a11);
			String[] a4 = {"流水号", "serialNo"};
			list.add(a4);
            excelUtils.toExcelAjax(list, orderExportList, outputStream);
        } catch (Exception e) {
            log.error("导出报表失败！");
        }
    }
	
	@RequestMapping("/order/v_view.do")
	public String view(String orderNumber, ModelMap model) {
		log.info("order id =" + orderNumber);
		List<OrderProduct> orderProducts = orderProductService.getOrderProductByOrderId(orderNumber);
		log.info("orderProducts size =" + orderProducts.size());
		OrderPostInfo orderPostInfo = orderPostInfoService.findOrderPostInfoByOrderNumber(orderNumber);
		model.addAttribute("orderProduct", orderProducts);
		model.addAttribute("order", orderProducts.get(0).getEntity());
		model.addAttribute("orderPostInfo", orderPostInfo);

		OrderVoucher orderVoucher = orderVoucherService.customerVoucher(orderNumber);
		model.addAttribute("orderVoucher", orderVoucher);

		List<OrderPayRefundEntity> orderPayRefundEntities = orderPayRefundService.findPayRefundListByOrderNumber(orderNumber);
		if(orderPayRefundEntities.size()>0){
			//展示最近一条添加的支付退款信息
			model.addAttribute("orderPayRefund",orderPayRefundEntities.get(0));
		}
		return "order/view";
	}
	
	@RequestMapping("/order/o_affirm.do")
	public String affirm(String code, HttpServletRequest request, ModelMap model) {
		/*Website web = SiteUtils.getWeb(request);
		WebErrors errors = validateEdit(id, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		Order order =  manager.findById(id);
		if(order.getStatus()==1){
			order.setStatus(2);
			manager.updateByUpdater(order);
		}
        List<OrderPayRefundEntity> orderPayRefundEntityList = orderPayRefundDao.findOrderRefundListByOrderId("", order.getCode());
        if(orderPayRefundEntityList.size()>0){
            model.addAttribute("orderPay", orderPayRefundEntityList.get(0));
        }
		model.addAttribute("order", order);
		return "order/view";*/
		log.info("confirm code = "+code);
		OrderEntity orderEntity = orderEntityService.findOrderEntityByOrderId(code);
		orderEntity.setStatus(OrderStatusEnum.Confirmed);
		orderEntityService.updateOrderEntity(orderEntity);
		return view(code,model);
	}
	
	@RequestMapping("/order/o_abolish.do")
	public String abolish(String code, HttpServletRequest request, ModelMap model) {
		/*Website web = SiteUtils.getWeb(request);
		WebErrors errors = validateEdit(id, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		Order order =  manager.findById(id);
		if(order.getStatus()!=4&&order.getShippingStatus()!=2&&order.getPaymentStatus()!=2){
			order.setStatus(3);
			//处理库存
			for(OrderItem item:order.getItems()){	
				Product product=item.getProduct();
				if(item.getProductFash()!=null){
					ProductFashion fashion=item.getProductFash();
					fashion.setStockCount(fashion.getStockCount()+item.getCount());
					product.setStockCount(product.getStockCount()+item.getCount());
					productFashionMng.update(fashion);
				}else{
					product.setStockCount(product.getStockCount()+item.getCount());
				}
				productMng.updateByUpdater(product);
			}
			//会员冻结的积分
			ShopMember member = order.getMember();
			member.setFreezeScore(member.getFreezeScore()-order.getScore());
			shopMemberMng.update(member);
			List<ShopScore> list = shopScoreMng.getlist(order.getCode());
			for(ShopScore s:list){
				shopScoreMng.deleteById(s.getId());
			}
			manager.updateByUpdater(order);
		}
		model.addAttribute("order", order);
		return "order/view";*/
		log.info("cancel code = "+code);
		OrderEntity orderEntity = orderEntityService.findOrderEntityByOrderId(code);
		orderEntity.setStatus(OrderStatusEnum.Cancelled);
		orderEntityService.updateOrderEntity(orderEntity);
		return view(code,model);
	}

	
	@RequestMapping("/order/v_payment.do")
	public String zhifu(Long id, HttpServletRequest request, ModelMap model) {
		Website web = SiteUtils.getWeb(request);
		WebErrors errors = validateEdit(id, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		Order order =  manager.findById(id);
		model.addAttribute("order", order);
		return "order/payment";
	}
	
	@RequestMapping("/order/v_shipments.do")
	public String shipmentses(Long id, HttpServletRequest request, ModelMap model) {
		Website web = SiteUtils.getWeb(request);
		WebErrors errors = validateEdit(id, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		Order order =  manager.findById(id);
		model.addAttribute("order", order);
		return "order/shipments";
	}
	
	
	
	@RequestMapping("/order/o_payment.do")
	public String payment(Gathering bean,Long id,HttpServletRequest request, ModelMap model) {
		Website web = SiteUtils.getWeb(request);
		WebErrors errors = validateEdit(id, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		Order order =  manager.findById(id);
		ShopAdmin admin = AdminThread.get();
		bean.setShopAdmin(admin);
		bean.setIndent(order);
		if(order.getPaymentStatus()==1&&order.getPayment().getType()==2){
			gatheringMng.save(bean);
			order.setPaymentStatus(2);
			manager.updateByUpdater(order);
		}
		model.addAttribute("order", order);
		return "order/view";
	}
	
	
	
	
	@RequestMapping("/order/o_accomplish.do")
	public String accomplish(Long id, HttpServletRequest request, ModelMap model){
		WebErrors errors = validateEdit(id, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		Order order =  manager.findById(id);
		if(order.getShippingStatus()==2&&order.getStatus()==2&&order.getPaymentStatus()==2){
			order.setStatus(4);
			//会员冻结的积分
			ShopMember member = order.getMember();
			member.setFreezeScore(member.getFreezeScore()-order.getScore());
			member.setScore(member.getScore()+order.getScore());
			shopMemberMng.update(member);
			List<ShopScore> list = shopScoreMng.getlist(order.getCode());
			for(ShopScore s:list){
				s.setStatus(true);
				shopScoreMng.update(s);
			}
		    manager.updateByUpdater(order);
		    manager.updateliRun(id);
		}
		model.addAttribute("order", order);
		return "order/view";
	}

	/**
	 * 重发凭证
	 * @param orderId
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping("/order/o_resend.do")
	public String reSend(String orderId, HttpServletRequest request, ModelMap model){
		log.info("orderId = " + orderId);
		try {
			long adminId = (long)session.getAttribute(request,"_admin_id_key");
			log.info("adminId = " + adminId);
			Admin admin = adminMng.findById(adminId);
			operationLogService.resendVoucher(admin.getUsername(), orderId, orderId);
			//将原来的凭证的作废
			orderVoucherService.reSendVoucher(orderId);
		}catch (Exception e){
			log.error("重发凭证异常",e);
		}
		return view(orderId,model);
	}

    @RequestMapping("/order/o_refund.do")
    public String refund(String code, HttpServletRequest request, ModelMap model){
		try{
			long adminId = (long)session.getAttribute(request,"_admin_id_key");
			log.info("adminId = " + adminId);
			Admin admin = adminMng.findById(adminId);
			operationLogService.orderRefund(admin.getUsername(), code, code);
		}catch (Exception e){
			log.error("add log fail",e);
		}

		String msg ="";
		try {
			OrderEntity orderEntity = orderEntityService.findOrderEntityByOrderId(code);
			if(manager.isConsume(orderEntity.getCode())){
				msg = "该凭证已被使用，不能退款";
			}else {
				try {
					refundBusinessDealing(orderEntity, request);
					msg = "退款成功";
				}catch (Exception e){
					msg ="退款异常";
				}
			}
			log.info("order code ==" + orderEntity.getCode());
			model.addAttribute("msg",msg);
		}catch (Exception e){
			log.error("退款异常",e);
		}
        return view(code,model);
    }

    /**
     * CCB Refund
     *
     * @param order
     */
    public void refundBusinessDealing(OrderEntity order, HttpServletRequest request) {
        OrderPayRefundEntity refundEntity = orderPayRefundService.getPaySuccessEntityByOrderID(order.getCode());
        long userId = (long)session.getAttribute(request, SESSION_USER_ID_KEY);
        log.info("userId=" + userId);

        User user = userMng.findById(userId);
        log.info("user name=="+user.getUsername());
        log.info("user storeFront name = " + user.getStoreFront());

        OrderPayRefundEntity orderPayRefundEntity = new OrderPayRefundEntity();
        String serialId = sequenceDao.getOrderRefundEntityId();
		log.info("serialID="+serialId);
        orderPayRefundEntity.setId(serialId);
        orderPayRefundEntity.setCode(order.getCode());
        orderPayRefundEntity.setPayTime(new Date());
        orderPayRefundEntity.setIsPay("0".toCharArray()[0]);//状态改成退款
        orderPayRefundEntity.setAmount(refundEntity.getAmount());
        orderPayRefundEntity.setEntity(refundEntity.getEntity());
        orderPayRefundEntity.setPayMethod(refundEntity.getPayMethod());
        orderPayRefundEntity.setSerialNumber(refundEntity.getSerialNumber());
        orderPayRefundEntity.setAccountNumber(refundEntity.getAccountNumber());
        orderPayRefundEntity.setOperator(user.getUsername());

        Channel channel = order.getChannel();

		log.info(" app is " +channel.getBankPayInfo().getApp());
		//根据订单号查找未使用的凭证信息
		OrderVoucher voucher = orderVoucherService.findNotUserVoucherByVoucherCode(order.getCode());

        if (BankAppEnum.CCB.equals(channel.getBankPayInfo().getApp())) {
            log.info("CCB starting refund");
            orderPayRefundEntity.setPayStatus(PaymentStatusEnum.RefundSucceeded);//退款成功 for CCB
			if(voucher!=null){
				voucher.setStatus(VoucherStatus.REFUND);//已退款
				//修改凭证状态
				orderVoucherService.updateVoucherCode(voucher);
			}


        } else if (BankAppEnum.CMBC.equals(channel.getBankPayInfo().getApp())) {
			try {
				HashMap<String, String> refundCallBack = cmbcRefundService.Refund(order.getCode(), order.getTotalAmount() + "", serialId);
				log.info("CMBC starting refund");
				String status = refundCallBack.get("refundStatus");
				log.info("status is " + status);
				if ("00".equals(status)) {
					orderPayRefundEntity.setPayStatus(PaymentStatusEnum.RefundSucceeded);//退款成功 for CCB
					//修改凭证状态
					if(voucher!=null){
						voucher.setStatus(VoucherStatus.REFUND);//已退款
						//修改凭证状态
						orderVoucherService.updateVoucherCode(voucher);
					}

				} else {
					orderPayRefundEntity.setPayStatus(PaymentStatusEnum.RefundFailed);//退款失败 for CMBC
				}
			}catch (Exception e){
				orderPayRefundEntity.setPayStatus(PaymentStatusEnum.RefundFailed);//退款失败
				log.error("退款异常",e);
			}

        }

		//保存退款信息
		orderPayRefundDao.save(orderPayRefundEntity);
		//update new order payment status
		order.setPaymentStatus(orderPayRefundEntity.getPayStatus());
		log.info("修改退款状态" + orderPayRefundEntity.getCode());
		orderEntityService.updateOrderEntityAndPayRefundEntity(order,orderPayRefundEntity);

    }

	@RequestMapping("/order/v_edit.do")
	public String edit(Long id, HttpServletRequest request, ModelMap model) {
		try{
			long adminId = (long)session.getAttribute(request,"_admin_id_key");
			log.info("adminId = " + adminId);
			Admin admin = adminMng.findById(adminId);
			operationLogService.orderUpdate(admin.getUsername(), id+"", id+"");
		}catch (Exception e){
			log.error("add log fail",e);
		}

		Website web = SiteUtils.getWeb(request);
		WebErrors errors = validateEdit(id, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		List<Shipping> shippingList = shippingMng.getList(web.getId(), true);
		List<Payment> paymentList = paymentMng.getList(web.getId(), true);
		model.addAttribute("order", manager.findById(id));
		model.addAttribute("paymentList", paymentList);
		model.addAttribute("shippingList", shippingList);
		model.addAttribute("orderReturn", orderReturnMng.findByOrderId(id));
		return "order/edit";
	}

	@RequestMapping("/order/o_update.do")
	public String update(Long id, String comments,Long shippingId,Long paymentId,Long[] itemId, Integer[] itemCount,
			Double[] itemPrice,Double totalPrice, Integer pageNo,
			HttpServletRequest request,HttpServletResponse response, ModelMap model) {
		WebErrors errors = validateUpdate(id,shippingId,itemId,itemCount,itemPrice,request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		Order order = manager.findById(id);
		/*int score = 0;
		int weight=0;
		double price=0.00;
		for(int i=0;i<itemId.length;i++){
			OrderItem orderItem = orderItemMng.findById(itemId[i]);
			Product product = orderItem.getProduct();
			product.setStockCount(product.getStockCount()+orderItem.getCount()-itemCount[i]);
			if(orderItem.getProductFash()!=null){
				ProductFashion  productFash = orderItem.getProductFash();
				productFash.setStockCount(productFash.getStockCount()+orderItem.getCount()-itemCount[i]);
				productFashionMng.update(productFash);
			}
			orderItem.setCount(itemCount[i]);
			orderItem.setSalePrice(itemPrice[i]);
			score = (int) (score +itemCount[i]*orderItem.getProduct().getScore());
			weight= weight+orderItem.getProduct().getWeight()*itemCount[i];
			if(orderItem.getProductFash()!=null){
				price+=itemPrice[i]*itemCount[i];
			}else{
				price+=itemPrice[i]*itemCount[i];
			}
			orderItemMng.updateByUpdater(orderItem);
			productMng.updateByUpdater(product);
		}
		order.setScore(score);
		double freight=0.0;
		if(shippingId!=null) {
			order.setShipping(shippingMng.findById(shippingId));
			freight = shippingMng.findById(shippingId).calPrice((double) weight);
		}
		order.setWeight((double) weight);
		order.setProductPrice(new Double(price).longValue());
*/
		String freightStr = request.getParameter("freight");
		Double freight = Double.parseDouble(freightStr);
		order.setFreight(freight);
		String totalAmount = request.getParameter("totalPrice");
		Double total = Double.parseDouble(totalAmount)*100;
		log.info("total ="+total.longValue());
		order.setTotal(total.longValue());
		order.setComments(comments);

		if(paymentId!=null) {
			order.setPayment(paymentMng.findById(paymentId));
		}
		order.setLastModified(new Timestamp(System.currentTimeMillis()));
	    manager.updateByUpdater(order);
		log.info("update Order, id={}.", order.getId());
		return list(null,null,null,null,null,null,null,null,null,null,null,null,null, pageNo, request, model);
	}
	
	@RequestMapping("/order/o_returnMoney.do")
	public void returnMoney(Long id,HttpServletRequest request, HttpServletResponse response, ModelMap model) {
		Website web = SiteUtils.getWeb(request);
	    OrderReturn orderReturn=orderReturnMng.findByOrderId(id);
    	if(orderReturn.getPayType()==2){
    		Payment pay=paymentMng.findById((long)3);
	    	PrintWriter out = null;
			try {
				String aliURL = alipayReturn(pay,web,orderReturn, request, model);
				response.setContentType("text/html;charset=UTF-8");
				out = response.getWriter();
				out.print(aliURL);
			} catch (Exception e) {
			}finally{
				out.close();
			}
    	}
	}
	
	private String alipayReturn(Payment pay,Website web,OrderReturn orderReturn,
			HttpServletRequest request,ModelMap model){
		////////////////////////////////////请求参数//////////////////////////////////////
		//必填参数//
		Date date=new Date();
		SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMdd");
		SimpleDateFormat sdf1=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String date1=sdf.format(date);
		//退款批次号。格式为：退款日期（8位当天日期）+流水号（3～24位，不能接受“000”，但是可以接受英文字符）
//		String batch_no = request.getParameter("batch_no");
		String batch_no = date1.concat(String.valueOf(orderReturn.getId()*100));
		//退款请求时间
//		String refund_date = request.getParameter("refund_date");
		String refund_date = sdf1.format(date);
		//退款总笔数
//		String batch_num = request.getParameter("batch_num");
		String batch_num =String.valueOf(1);
		//单笔数据集
//		String detail_data =  new String(request.getParameter("detail_data").getBytes("ISO-8859-1"),"gbk");
		String detail_data = orderReturn.getOrder().getId().toString()+"^"+1.00+"^"+orderReturn.getShopDictionary().getName();
		//格式：第一笔交易#第二笔交易#第三笔交易
	        //第N笔交易格式：交易退款信息
	        //交易退款信息格式：原付款支付宝交易号^退款总金额^退款理由
	        //注意：
	        //1.detail_data中的退款笔数总和要等于参数batch_num的值
	        //2.detail_data的值中不能有“^”、“|”、“#”、“$”等影响detail_data的格式的特殊字符
	        //3.detail_data中退款总金额不能大于交易总金额
	        //4.一笔交易可以多次退款，只需要遵守多次退款的总金额不超过该笔交易付款时金额。
	        //5.不支持退分润功能
		//选填参数（以下两个参数不能同时为空）
		//卖家支付宝账号
//		String seller_email = request.getParameter("seller_email");
		//String seller_email = pay.getSellerEmail();
		//卖家用户ID
//		String seller_user_id = request.getParameter("seller_user_id");
	//	String seller_user_id = pay.getSellerKey();
		//服务器页面跳转同步通知页面
		String notify_url="http://"+web.getDomain()+"/cart/aliReturn.jspx";
		//////////////////////////////////////////////////////////////////////////////////
		//把请求参数打包成数组
		Map<String, String> sParaTemp = new HashMap<String, String>();
	//	sParaTemp.put("partner", pay.getPartner());
		//sParaTemp.put("seller_email", seller_email);
		//sParaTemp.put("seller_user_id", seller_user_id);
        sParaTemp.put("batch_no", batch_no);
        sParaTemp.put("refund_date", refund_date);
        sParaTemp.put("batch_num", batch_num);
        sParaTemp.put("detail_data", detail_data);
        sParaTemp.put("notify_url", notify_url);
		//构造函数，生成请求URL  
		String sHtmlText=null;
		try {
			sHtmlText = refund_fastpay_by_platform_pwd(sParaTemp);
		} catch (Exception e) {
			e.printStackTrace();
		}
//		out.println(sHtmlText);
		return sHtmlText;
	}
	
	
	/**
     * 支付宝提供给商户的服务接入网关URL(新)
     */
    private static final String ALIPAY_GATEWAY_NEW = "https://mapi.alipay.com/gateway.do?";
	
	/**
     * 构造即时到账批量退款有密接口
     * @param sParaTemp 请求参数集合
     * @return 支付宝返回表单提交HTML信息
     * @throws Exception 
     */
    public static String refund_fastpay_by_platform_pwd(Map<String, String> sParaTemp) throws Exception {
    	//增加基本配置
        sParaTemp.put("service", "refund_fastpay_by_platform_pwd");
        sParaTemp.put("_input_charset", "UTF-8");
        String strButtonName="退款";
        return buildForm(sParaTemp, ALIPAY_GATEWAY_NEW, "get", strButtonName);
    }
    
    /**
     * 构造提交表单HTML数据
     * @param sParaTemp 请求参数数组
     * @param gateway 网关地址
     * @param strMethod 提交方式。两个值可选：post、get
     * @param strButtonName 确认按钮显示文字
     * @return 提交表单HTML文本
     */
    public static String buildForm(Map<String, String> sParaTemp, String gateway, String strMethod,
                                   String strButtonName) {
        //待请求参数数组
        Map<String, String> sPara = buildRequestPara(sParaTemp);
        List<String> keys = new ArrayList<String>(sPara.keySet());

        StringBuffer sbHtml = new StringBuffer();

        sbHtml.append("<form id=\"alipaysubmit\" name=\"alipaysubmit\" action=\"" + gateway
                      + "_input_charset=" + "UTF-8" + "\" method=\"" + strMethod
                      + "\">");

        for (int i = 0; i < keys.size(); i++) {
            String name = (String) keys.get(i);
            String value = (String) sPara.get(name);

            sbHtml.append("<input type=\"hidden\" name=\"" + name + "\" value=\"" + value + "\"/>");
        }

        //submit按钮控件请不要含有name属性
        sbHtml.append("<input type=\"submit\" value=\"" + strButtonName + "\" style=\"display:none;\"></form>");
        sbHtml.append("<script>document.forms['alipaysubmit'].submit();</script>");

        return sbHtml.toString();
    }
    
    
    /**
    * 生成要请求给支付宝的参数数组
    * @param sParaTemp 请求前的参数数组
    * @return 要请求的参数数组
    */
   private static Map<String, String> buildRequestPara(Map<String, String> sParaTemp) {
       //除去数组中的空值和签名参数
       Map<String, String> sPara = paraFilter(sParaTemp);
       //生成签名结果
       String mysign = buildMysign(sPara);

       //签名结果与签名方式加入请求提交参数组中
       sPara.put("sign", mysign);
       sPara.put("sign_type", "MD5");

       return sPara;
   }
   
   public static String buildMysign(Map<String, String> sArray) {
       String prestr = createLinkString(sArray); //把数组所有元素，按照“参数=参数值”的模式用“&”字符拼接成字符串
       prestr = prestr +sArray.get("key"); //把拼接后的字符串再与安全校验码直接连接起来
       String mysign = md5(prestr);
       return mysign;
   }
   
   public static String md5(String text) {

       return DigestUtils.md5Hex(getContentBytes(text, "UTF-8"));

   }
   
   
   private static byte[] getContentBytes(String content, String charset) {
       if (charset == null || "".equals(charset)) {
           return content.getBytes();
       }

       try {
           return content.getBytes(charset);
       } catch (UnsupportedEncodingException e) {
           throw new RuntimeException("MD5签名过程中出现错误,指定的编码集不对,您目前指定的编码集是:" + charset);
       }
   }
   /** 
    * 把数组所有元素排序，并按照“参数=参数值”的模式用“&”字符拼接成字符串
    * @param params 需要排序并参与字符拼接的参数组
    * @return 拼接后字符串
    */
   public static String createLinkString(Map<String, String> params) {

       List<String> keys = new ArrayList<String>(params.keySet());
       Collections.sort(keys);

       String prestr = "";

       for (int i = 0; i < keys.size(); i++) {
           String key = keys.get(i);
           String value = params.get(key);

           if (i == keys.size() - 1) {//拼接时，不包括最后一个&字符
               prestr = prestr + key + "=" + value;
           } else {
               prestr = prestr + key + "=" + value + "&";
           }
       }

       return prestr;
   }
   
   
   /** 
    * 除去数组中的空值和签名参数
    * @param sArray 签名参数组
    * @return 去掉空值与签名参数后的新签名参数组
    */
   public static Map<String, String> paraFilter(Map<String, String> sArray) {

       Map<String, String> result = new HashMap<String, String>();

       if (sArray == null || sArray.size() <= 0) {
           return result;
       }

       for (String key : sArray.keySet()) {
           String value = sArray.get(key);
           if (value == null || value.equals("") || key.equalsIgnoreCase("sign")
               || key.equalsIgnoreCase("sign_type")) {
               continue;
           }
           result.put(key, value);
       }

       return result;
   }
	
	//计算运费
	@RequestMapping(value = "/order/ajaxtotalDeliveryFee.do")
	public void ajaxtotalDeliveryFee(Long deliveryMethod,Double weight,
			HttpServletRequest request, HttpServletResponse response,
			ModelMap model) throws JSONException {
		ShopMember member = MemberThread.get();
		JSONObject json=new JSONObject();
		if (member == null) {
			json.put("status", 0);
		}
		Shipping shipping=shippingMng.findById(deliveryMethod);
		//计算运费
		Double freight=shipping.calPrice(weight);
		json.put("status", 1);
		json.put("freight", freight);
		ResponseUtils.renderJson(response, json.toString());
	}

	
	private Integer findItem(Long[] itemIds, Long itemId) {
		for(int i=0;i<itemIds.length;i++){
			if (itemIds[i].equals(itemId)) {
				return i;
			}
		}
		return null;
	}

	@RequestMapping("/order/o_delete.do")
	public String delete(Long[] ids, String type, Integer pageNo,
			HttpServletRequest request, ModelMap model) {
		//删除只显示前五个id
		String idCollection = "";
		if(ids.length>5){
			for (int i = 0; i < 5; i++) {
				OrderEntity orderEntity = orderEntityService.findOrderEntityById(ids[i]);
				if(i==4){
					idCollection +=orderEntity.getCode();
				}else {
					idCollection +=orderEntity.getCode()+",";
				}
			}
		}else {
			for (int i = 0; i < ids.length; i++) {
				OrderEntity orderEntity = orderEntityService.findOrderEntityById(ids[i]);
				if(i==ids.length-1){
					idCollection +=orderEntity.getCode();
				}else {
					idCollection +=orderEntity.getCode()+",";
				}
			}
		}

		try{
			long adminId = (long)session.getAttribute(request,"_admin_id_key");
			log.info("adminId = " + adminId);
			Admin admin = adminMng.findById(adminId);
			operationLogService.orderDelete(admin.getUsername(), idCollection, idCollection);
		}catch (Exception e){
			log.error("add log fail",e);
		}

        OrderEntity[] beans = orderEntityService.deleteByIdsUpdateOrderDelStatus(ids);
		for (OrderEntity bean : beans) {
			log.info("delete Order, id={}", bean.getId());
		}
		return list(null,null,null,null,null,null,null,null,null,null,null,null,null, pageNo, request, model);
	}

	private WebErrors validateEdit(Long id, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		Website web = SiteUtils.getWeb(request);
		if (vldExist(id, web.getId(), errors)) {
			return errors;
		}
		return errors;
	}

	private WebErrors validateUpdate(Long id,
			Long shippingId,Long[] itemId,
			Integer[] itemCount, Double[] itemPrice,
			HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		Website web = SiteUtils.getWeb(request);
		if (vldExist(id, web.getId(), errors)) {
			return errors;
		}
		if (itemId == null || itemCount == null || itemPrice == null
				|| itemId.length == 0 || itemId.length != itemCount.length
				|| itemCount.length != itemPrice.length) {
			errors.addErrorString("order item invalid!");
			return errors;
		}
		return errors;
	}

	private WebErrors validateDelete(Long[] ids, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		Website web = SiteUtils.getWeb(request);
		errors.ifEmpty(ids, "ids");
		for (Long id : ids) {
			vldExist(id, web.getId(), errors);
		}
		return errors;
	}

	private boolean vldExist(Long id, Long webId, WebErrors errors) {
		if (errors.ifNull(id, "id")) {
			return true;
		}
		Order entity = manager.findById(id);
		if (errors.ifNotExist(entity, Order.class, id)) {
			return true;
		}
		if (entity.getWebsite()!=null&&!entity.getWebsite().getId().equals(webId)) {
			errors.notInWeb(Order.class, id);
			return true;
		}
		return false;
	}

	@Autowired
	private ShippingMng shippingMng;
	@Autowired
	private PaymentMng paymentMng;
	@Autowired
	private OrderMng manager;
	@Autowired
	private OrderReturnMng orderReturnMng;
    @Autowired
	private ShopMemberMng shopMemberMng;
 	@Autowired
	private ShopScoreMng shopScoreMng;
	@Autowired
	private ProductMng productMng;
	@Autowired
	private ProductFashionMng productFashionMng;
	@Autowired
	private OrderItemMng orderItemMng;
	@Autowired
	private GatheringMng gatheringMng;

    @Autowired
    private SequenceDao sequenceDao;
    @Autowired
    private OrderPayRefundDao orderPayRefundDao;
    @Resource
    private SessionProvider session;
    @Resource
    private UserMng userMng;

    @Resource
    private ChannelDao channelDao;
    @Resource
    private CmbcRefundService cmbcRefundService;

	@Resource
	private AdminMng adminMng;
	@Resource
	private OperationLogService operationLogService;

	@Resource
	private OrderEntityService orderEntityService;

	@Resource
	private OrderProductService orderProductService;

	@Resource
	private OrderPostInfoService orderPostInfoService;

	@Resource
	private OrderPayRefundService orderPayRefundService;
}